The MatriceAdjacence module
=========================

Using _matrice_adjacence

>>> from matriceadjacence_incomplet import *
>>> G = MatriceAdjacence()
>>> G._matrice_adjacence
[]


Using ajouter_arete()

>>> G = MatriceAdjacence(1)
>>> G.ajouter_arete(1, 3)
>>> G._matrice_adjacence
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0], [0, 1, 0, 0]]


Using ajouter_aretes()

>>> aretes = [(1, 2), (1, 3), (2, 4)]
>>> g = MatriceAdjacence(5)
>>> g.ajouter_aretes(aretes);
>>> g._matrice_adjacence
[[0, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0]]


Using ajouter_sommet()

>>> G = MatriceAdjacence()
>>> G.ajouter_sommet()
0
>>> G._matrice_adjacence
[[0]]
>>> G.ajouter_sommet()
1
>>> G._matrice_adjacence
[[0, 0], [0, 0]]


Using aretes()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes);
>>> g._matrice_adjacence
[[0, 0, 0, 0], [0, 1, 1, 1], [0, 1, 0, 1], [0, 1, 1, 0]]
>>> g.aretes()
{frozenset({1, 3}), frozenset({2, 3}), frozenset({1, 2})}


Using boucles()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (4, 4)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes);
>>> g.boucles()
{1, 4}


Using contient_arete()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes);
>>> g.contient_arete(2, 1)
True


Using contient_sommet()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes);
>>> g.contient_sommet(4)
False


Using degre()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.degre(1)
2


Using nombre_aretes()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.nombre_aretes()
3


Using nombre_boucles()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.nombre_boucles()
2


Using nombre_sommets()

>>> from random import randint
>>> n = randint(0, 1000)
>>> MatriceAdjacence(n).nombre_sommets() == n
True


Using retirer_arete()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.retirer_arete(1, 2)
>>> g._matrice_adjacence
[[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]]


Using retirer_aretes()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> a_retirer = [(1, 1), (1, 2)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.retirer_aretes(a_retirer)
>>> g._matrice_adjacence
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]]


Using retirer_sommet()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.retirer_sommet(1)
>>> g._matrice_adjacence
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1]]


Using retirer_sommets()

>>> aretes = [(0, 1), (0, 3), (1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g._matrice_adjacence
[[0, 1, 0, 1], [1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 1, 1]]
>>> g.retirer_sommets([0, 3])
>>> g._matrice_adjacence
[[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]]


Using sommets()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.sommets()
{1, 2, 3}


Using sous_graphe_induit()

>>> aretes = [(0, 1), (0, 3), (1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> sous_graphe = g.sous_graphe_induit([0, 2, 3])
>>> sous_graphe.sommets()
{0, 2, 3}
>>> sous_graphe.aretes()
{frozenset({2, 3}), frozenset({0, 3})}
>>> sous_graphe.boucles()
{3}


Using voisins()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> g.voisins(1)
{2, 3}


Using export_dot()

>>> aretes = [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)]
>>> g = MatriceAdjacence()
>>> g.ajouter_aretes(aretes)
>>> print(export_dot(g))
graph G {
    1;
    2;
    3;
    1 -- 3;
    2 -- 3;
    1 -- 2;
    1 -- 1;
    3 -- 3;
}
